name: Release DBI Patcher

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install MinGW and verify tools
      run: |
        choco install mingw -y
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $env:GITHUB_PATH
        # 验证工具可用性
        gcc --version
        make --version
        
    - name: Verify source files and directory structure
      run: |
        # 检查源代码目录结构
        dir src /s
        # 检查源文件是否存在
        if (Test-Path src\*.c) {
            echo "C source files found in src/"
            dir src\*.c
        }
        if (Test-Path src\inc\*.h) {
            echo "Header files found in src/inc/"
        }

    - name: Verify pre-built zstd DLL
      run: |
        if (Test-Path libs/zstd/dll/libzstd.dll) { 
            echo "Pre-built libzstd.dll found" 
            Get-Item libs/zstd/dll/libzstd.dll
        } else { 
            echo "Error: Pre-built libzstd.dll not found" 
            exit 1 
        }

    - name: Build for Windows
      run: |
        make clean
        # 显示详细构建过程
        make -j4 V=1

    - name: Verify build output
      run: |
        if (Test-Path bin/dbipatcher.exe) { 
            echo "Build successful: dbipatcher.exe found" 
            Get-Item bin/dbipatcher.exe
            if (Test-Path bin/libzstd.dll) { 
                echo "libzstd.dll copied to bin directory" 
            }
        } else { 
            echo "Build failed: dbipatcher.exe not found" 
            # 检查对象文件是否生成
            if (Test-Path build\*.o) {
                echo "Object files found:"
                dir build
            }
            exit 1 
        }

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: dbipatcher-windows
        path: |
          bin/dbipatcher.exe
          bin/libzstd.dll
        if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential make libzstd-dev

    - name: Build for Linux
      run: |
        make clean
        make -j4

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: dbipatcher-linux
        path: bin/dbipatcher
        if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        brew update
        brew install make zstd
        echo "PATH=/opt/homebrew/bin:/usr/local/bin:$PATH" >> $GITHUB_ENV

    - name: Build for macOS
      run: |
        make clean
        make -j4

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: dbipatcher-macos
        path: bin/dbipatcher
        if-no-files-found: error

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded files
      run: |
        find artifacts -type f | sort

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: DBI Patcher ${{ github.ref_name }}
        body: |
          Automated build of DBI Patcher ${{ github.ref_name }}

          **Platforms included:**
          - Windows (x86_64)
          - Linux (x86_64)
          - macOS (x86_64)

          **Usage:**
          ```bash
          # Linux/macOS
          chmod +x dbipatcher
          ./dbipatcher --help

          # Windows
          dbipatcher.exe --help
          ```
        draft: false
        prerelease: false
        files: |
          artifacts/dbipatcher-windows/dbipatcher.exe
          artifacts/dbipatcher-linux/dbipatcher
          artifacts/dbipatcher-macos/dbipatcher
